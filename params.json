{"name":"Gkumar10.GitHub.io","tagline":"","body":"<title></title>\r\n\r\n<script src=\"data:application/x-javascript\"></script>\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<link href=\"data:text/css\" rel=\"stylesheet\" />\r\n<script src=\"data:application/x-javascript\"></script>\r\n<script src=\"data:application/x-javascript\"></script>\r\n\r\n<style type=\"text/css\">code{white-space: pre;}</style>\r\n<link href=\"data:text/css\" rel=\"stylesheet\" type=\"text/css\" />\r\n<script src=\"data:application/x-javascript\"></script>\r\n<style type=\"text/css\">\r\n  pre:not([class]) {\r\n    background-color: white;\r\n  }\r\n</style>\r\n<script type=\"text/javascript\">\r\nif (window.hljs && document.readyState && document.readyState === \"complete\") {\r\n   window.setTimeout(function() {\r\n      hljs.initHighlighting();\r\n   }, 0);\r\n}\r\n</script>\r\n\r\n\r\n\r\n</head>\r\n\r\n<body>\r\n\r\n<style type=\"text/css\">\r\n.main-container {\r\n  max-width: 940px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\ncode {\r\n  color: inherit;\r\n  background-color: rgba(0, 0, 0, 0.04);\r\n}\r\nimg { \r\n  max-width:100%; \r\n  height: auto; \r\n}\r\n</style>\r\n<div class=\"container-fluid main-container\">\r\n\r\n\r\n\r\n\r\n<div id=\"background\" class=\"section level1\">\r\n<h1>Background</h1>\r\n<p>Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it.</p>\r\n</div>\r\n<div id=\"goal\" class=\"section level1\">\r\n<h1>Goal</h1>\r\n<p>Goal is to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants to predict the manner in which they did the exercise. This is the “classe” variable in the training set. We will use any of the other variables to predict with. The report describes how the model was built, how I used cross validation, what the out of sample error is.</p>\r\n</div>\r\n<div id=\"preprocessing\" class=\"section level1\">\r\n<h1>Preprocessing</h1>\r\n<p>Load libraries and training data. Create training set with 60% of dataset. For cross-validation, we will partition testing set into 2 equal subsets.</p>\r\n<pre class=\"r\"><code>suppressWarnings(suppressMessages(library(caret)))\r\nsuppressWarnings(suppressMessages(library(randomForest)))\r\nsuppressWarnings(suppressMessages(library(rpart)))\r\nsuppressWarnings(suppressMessages(library(pROC)))\r\nsetwd(&quot;~/Coursera/Practical-Machine-Learning&quot;)\r\n\r\ndf &lt;- read.csv(&quot;pml-training.csv&quot;, na.strings=c(&quot;NA&quot;,&quot;&quot;), header=TRUE)\r\ninTrain &lt;- createDataPartition(df$classe, p=0.6, list=FALSE)\r\ntraining &lt;- df[inTrain,]\r\ntesting &lt;- df[-inTrain,]\r\ninSubTest &lt;- createDataPartition(testing$classe, p=0.5, list=FALSE)\r\nsub_testing1 &lt;- testing[inSubTest,]\r\nsub_testing2 &lt;- testing[-inSubTest,]</code></pre>\r\n<p>The training set has 160 columns. Not all columns wil be useful since many have NA values. We will remove these columns now.</p>\r\n<pre class=\"r\"><code>training &lt;- training[, which(as.numeric(colSums(is.na(training)))==0)]</code></pre>\r\n<p>We will also remove columns that are non-numerics or timestamps or near zero fractions.</p>\r\n<pre class=\"r\"><code>training &lt;- training[,-c(1:7)]\r\ntraining &lt;- training[, -c(grep(&quot;^gyros&quot;, names(training)))]\r\ntraining &lt;- training[complete.cases(training), ]</code></pre>\r\n</div>\r\n<div id=\"model-selection-and-training\" class=\"section level1\">\r\n<h1>Model selection and training</h1>\r\n<p>We will use 2 two learning algorithms (rpart and rf) to compare accuracy and out of sample errors.</p>\r\n<div id=\"recursive-partitioning-rpart\" class=\"section level3\">\r\n<h3>Recursive Partitioning (rpart)</h3>\r\n<pre class=\"r\"><code>modelFit_rpart &lt;- train(classe ~ ., data=training, method=&quot;rpart&quot;)\r\nprediction_rpart &lt;- predict(modelFit_rpart, newdata=testing)\r\ncfm_rpart &lt;- confusionMatrix(prediction_rpart, testing$classe)\r\ncfm_rpart</code></pre>\r\n<pre><code>## Confusion Matrix and Statistics\r\n## \r\n##           Reference\r\n## Prediction    A    B    C    D    E\r\n<<<<<<< HEAD\r\n##          A 2042  654  633  587  199\r\n##          B   33  500   39  215  190\r\n##          C  152  364  696  484  391\r\n##          D    0    0    0    0    0\r\n##          E    5    0    0    0  662\r\n## \r\n## Overall Statistics\r\n##                                           \r\n##                Accuracy : 0.4971          \r\n##                  95% CI : (0.4859, 0.5082)\r\n##     No Information Rate : 0.2845          \r\n##     P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \r\n##                                           \r\n##                   Kappa : 0.3423          \r\n=======\r\n##          A 2046  654  650  573  221\r\n##          B   27  403   21  217   81\r\n##          C  155  461  697  496  477\r\n##          D    0    0    0    0    0\r\n##          E    4    0    0    0  663\r\n## \r\n## Overall Statistics\r\n##                                           \r\n##                Accuracy : 0.4855          \r\n##                  95% CI : (0.4744, 0.4966)\r\n##     No Information Rate : 0.2845          \r\n##     P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \r\n##                                           \r\n##                   Kappa : 0.3273          \r\n>>>>>>> origin/master\r\n##  Mcnemar's Test P-Value : NA              \r\n## \r\n## Statistics by Class:\r\n## \r\n##                      Class: A Class: B Class: C Class: D Class: E\r\n<<<<<<< HEAD\r\n## Sensitivity            0.9149  0.32938  0.50877   0.0000  0.45908\r\n## Specificity            0.6307  0.92462  0.78527   1.0000  0.99922\r\n## Pos Pred Value         0.4962  0.51177  0.33349      NaN  0.99250\r\n## Neg Pred Value         0.9491  0.85180  0.88331   0.8361  0.89135\r\n## Prevalence             0.2845  0.19347  0.17436   0.1639  0.18379\r\n## Detection Rate         0.2603  0.06373  0.08871   0.0000  0.08437\r\n## Detection Prevalence   0.5245  0.12452  0.26600   0.0000  0.08501\r\n## Balanced Accuracy      0.7728  0.62700  0.64702   0.5000  0.72915</code></pre>\r\n<p>Accuracy of model with rpart method is 0.4970686 or 49.71 %.</p>\r\n<p>Out of sample error is 0.5029314. This is the error rate when the method is used on a new data set.</p>\r\n</div>\r\n<div id=\"random-forest-rf\" class=\"section level3\">\r\n<h3>Random Forest (rf)</h3>\r\n<pre class=\"r\"><code>modelFit_rf &lt;- train(classe ~ ., data=training, method=&quot;rf&quot;, trControl = trainControl(method=&quot;cv&quot;, number=4)) \r\n=======\r\n## Sensitivity            0.9167  0.26548  0.50950   0.0000  0.45978\r\n## Specificity            0.6263  0.94532  0.75471   1.0000  0.99938\r\n## Pos Pred Value         0.4937  0.53805  0.30490      NaN  0.99400\r\n## Neg Pred Value         0.9498  0.84289  0.87932   0.8361  0.89149\r\n## Prevalence             0.2845  0.19347  0.17436   0.1639  0.18379\r\n## Detection Rate         0.2608  0.05136  0.08884   0.0000  0.08450\r\n## Detection Prevalence   0.5282  0.09546  0.29136   0.0000  0.08501\r\n## Balanced Accuracy      0.7715  0.60540  0.63211   0.5000  0.72958</code></pre>\r\n<p>Accuracy of model with rpart method is 0.4854703 or 48.55 %.</p>\r\n<p>Out of sample error is 0.5145297. This is the error rate when the method is used on a new data set.</p>\r\n</div>\r\n<div id=\"random-forest-rf\" class=\"section level3\">\r\n<h3>Random Forest (rf)</h3>\r\n<pre class=\"r\"><code>#modelFit_rf &lt;- randomForest(classe ~ ., data=training) \r\nmodelFit_rf &lt;- train(classe ~ ., data=training, method=&quot;rf&quot;, trControl = trainControl(method=&quot;cv&quot;, number=4)) \r\n>>>>>>> origin/master\r\nprediction_rf &lt;- predict(modelFit_rf, newdata=testing)\r\ncfm_rf &lt;- confusionMatrix(prediction_rf, testing$classe)\r\ncfm_rf</code></pre>\r\n<pre><code>## Confusion Matrix and Statistics\r\n## \r\n##           Reference\r\n## Prediction    A    B    C    D    E\r\n<<<<<<< HEAD\r\n##          A 2224   14    0    0    0\r\n##          B    8 1485   12    0    5\r\n##          C    0   16 1349   13    3\r\n##          D    0    3    7 1272    4\r\n##          E    0    0    0    1 1430\r\n## \r\n## Overall Statistics\r\n##                                           \r\n##                Accuracy : 0.989           \r\n##                  95% CI : (0.9865, 0.9912)\r\n##     No Information Rate : 0.2845          \r\n##     P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \r\n##                                           \r\n##                   Kappa : 0.9861          \r\n##  Mcnemar's Test P-Value : NA              \r\n=======\r\n##          A 2228   15    0    0    0\r\n##          B    2 1493   14    0    0\r\n##          C    1    8 1351   25    7\r\n##          D    0    1    3 1259    8\r\n##          E    1    1    0    2 1427\r\n## \r\n## Overall Statistics\r\n##                                          \r\n##                Accuracy : 0.9888         \r\n##                  95% CI : (0.9862, 0.991)\r\n##     No Information Rate : 0.2845         \r\n##     P-Value [Acc &gt; NIR] : &lt; 2.2e-16      \r\n##                                          \r\n##                   Kappa : 0.9858         \r\n##  Mcnemar's Test P-Value : NA             \r\n>>>>>>> origin/master\r\n## \r\n## Statistics by Class:\r\n## \r\n##                      Class: A Class: B Class: C Class: D Class: E\r\n<<<<<<< HEAD\r\n## Sensitivity            0.9964   0.9783   0.9861   0.9891   0.9917\r\n## Specificity            0.9975   0.9960   0.9951   0.9979   0.9998\r\n## Pos Pred Value         0.9937   0.9834   0.9768   0.9891   0.9993\r\n## Neg Pred Value         0.9986   0.9948   0.9971   0.9979   0.9981\r\n## Prevalence             0.2845   0.1935   0.1744   0.1639   0.1838\r\n## Detection Rate         0.2835   0.1893   0.1719   0.1621   0.1823\r\n## Detection Prevalence   0.2852   0.1925   0.1760   0.1639   0.1824\r\n## Balanced Accuracy      0.9970   0.9872   0.9906   0.9935   0.9958</code></pre>\r\n<p>Accuracy of model with rf method is 0.989039 or 98.9 %.</p>\r\n<p>Out of sample error is 0.010961.</p>\r\n=======\r\n## Sensitivity            0.9982   0.9835   0.9876   0.9790   0.9896\r\n## Specificity            0.9973   0.9975   0.9937   0.9982   0.9994\r\n## Pos Pred Value         0.9933   0.9894   0.9705   0.9906   0.9972\r\n## Neg Pred Value         0.9993   0.9961   0.9974   0.9959   0.9977\r\n## Prevalence             0.2845   0.1935   0.1744   0.1639   0.1838\r\n## Detection Rate         0.2840   0.1903   0.1722   0.1605   0.1819\r\n## Detection Prevalence   0.2859   0.1923   0.1774   0.1620   0.1824\r\n## Balanced Accuracy      0.9978   0.9905   0.9906   0.9886   0.9945</code></pre>\r\n<p>Accuracy of model with rf method is 0.9887841 or 98.88 %.</p>\r\n<p>Out of sample error is 0.0112159.</p>\r\n>>>>>>> origin/master\r\n<p>Clearly rf method has better accuracy and way lower out of sample error rate. We will continue to use Random Forest (rf) as the learning algorithm to obtain better predictive performance and find best predictors for classe variable.</p>\r\n<p>We will use variable importance evaluation function ‘varImp’ to assign each predictor with a separate variable importance. All measures of importance is scaled to have a maximum value of 100.</p>\r\n<pre class=\"r\"><code>varimp &lt;- varImp(modelFit_rf, varImp.train=FALSE)\r\nplot(varimp, top=25)</code></pre>\r\n<<<<<<< HEAD\r\n<p><img src=\"http://gkumar10.github.io/Practical_Machine_Learning_Course_Project_files/figure-html/unnamed-chunk-6-1.png\" alt=\"\" width=\"672\" /></p>\r\n<p>The top 25 most important variables are: roll_belt, pitch_belt, yaw_belt, total_accel_belt, accel_belt_x, accel_belt_y, accel_belt_z, magnet_belt_x, magnet_belt_y, magnet_belt_z, roll_arm, pitch_arm, yaw_arm, total_accel_arm, accel_arm_x, accel_arm_y, accel_arm_z, magnet_arm_x, magnet_arm_y, magnet_arm_z, roll_dumbbell, pitch_dumbbell, yaw_dumbbell, total_accel_dumbbell, accel_dumbbell_x, accel_dumbbell_y, accel_dumbbell_z, magnet_dumbbell_x, magnet_dumbbell_y, magnet_dumbbell_z, roll_forearm, pitch_forearm, yaw_forearm, total_accel_forearm, accel_forearm_x, accel_forearm_y, accel_forearm_z, magnet_forearm_x, magnet_forearm_y, magnet_forearm_z</p>\r\n<p>Next we will compute area under the ROC curve for each class against the predictor. The ROC curve is essentially a plot of true positive rate against the false positive rate at various threshold settings.</p>\r\n<pre class=\"r\"><code>RocImp &lt;- filterVarImp(x = training[, -ncol(training)], y = training$classe)\r\nplot(RocImp)</code></pre>\r\n<p><img src=\"http://gkumar10.github.io/Practical_Machine_Learning_Course_Project_files/figure-html/unnamed-chunk-7-1.png\" alt=\"\" width=\"672\"/></p>\r\n</div>\r\n</div>\r\n<div id=\"model-testing-and-cross-validation\" class=\"section level1\">\r\n<h1>Model testing and cross-validation</h1>\r\n<p>Let us now test the models against the two testing subsets created during pre-processing.</p>\r\n<pre class=\"r\"><code>prediction1 &lt;- predict(modelFit_rf, newdata=sub_testing1)\r\ncfm1 &lt;- confusionMatrix(prediction1, sub_testing1$classe)\r\n\r\nprediction2 &lt;- predict(modelFit_rf, newdata=sub_testing2)\r\ncfm2 &lt;- confusionMatrix(prediction2, sub_testing2$classe)</code></pre>\r\n<<<<<<< HEAD\r\n<p>The accuracy of model against testing subset 1 is: 0.9895488 or 98.95 %. Out of sample error is 0.0104512.</p>\r\n<p>The accuracy of model against testing subset 2 is: 0.9882743 or 98.83 %. Out of sample error is 0.0117257.</p>\r\n<div id=\"references\" class=\"section level2\">\r\n<h2>References:</h2>\r\n<ol style=\"list-style-type: decimal\">\r\n<li>Variable Importance function: <a href=\"http://topepo.github.io/caret/varimp.html\" class=\"uri\">http://topepo.github.io/caret/varimp.html</a></li>\r\n<li>Models available in caret: <a href=\"http://topepo.github.io/caret/bytag.html\" class=\"uri\">http://topepo.github.io/caret/bytag.html</a></li>\r\n=======\r\n<p>The accuracy of model against testing subset 1 is: 0.9941371 or 99.41 %. Out of sample error is 0.0058629.</p>\r\n<p>The accuracy of model against testing subset 2 is: 0.9959215 or 99.59 %. Out of sample error is 0.0040785.</p>\r\n<div id=\"references\" class=\"section level2\">\r\n<h2>References:</h2>\r\n<ol style=\"list-style-type: decimal\">\r\n<li>Variable Importance function: <a href=\"http://topepo.github.io/caret/varimp.html\">http://topepo.github.io/caret/varimp.html</a></li>\r\n<li>Models available in caret: <a href=\"http://topepo.github.io/caret/bytag.html\">http://topepo.github.io/caret/bytag.html</a></li>\r\n>>>>>>> origin/master\r\n</ol>\r\n</div>\r\n</div>\r\n<div id=\"end-of-course-project-writeup\" class=\"section level1\">\r\n<h1>End of course project writeup</h1>\r\n<p>+++++++++++++++++++++++++++++++++++++++++++++</p>\r\n<div id=\"below-code-is-for-course-project-submission\" class=\"section level3\">\r\n<h3>Below code is for course project submission</h3>\r\n<pre class=\"r\"><code>testFinal &lt;- read.csv(&quot;pml-testing.csv&quot;, header=TRUE)\r\nx &lt;- sort(match(names(training), names(testFinal)))\r\ntestFinal &lt;- testFinal[,x]\r\nanswers &lt;- predict(modelFit_rf, testFinal)\r\n\r\npml_write_files = function(x){\r\n  n = length(x)\r\n  for(i in 1:n){\r\n    filename = paste0(&quot;problem_id_&quot;,i,&quot;.txt&quot;)\r\n    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)\r\n  }\r\n}\r\n\r\npml_write_files(answers)</code></pre>\r\n</div>\r\n</div>\r\n\r\n\r\n</div>\r\n\r\n<script>\r\n\r\n// add bootstrap table styles to pandoc tables\r\n$(document).ready(function () {\r\n  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');\r\n});\r\n\r\n</script>\r\n\r\n<!-- dynamically load mathjax for compatibility with self-contained -->\r\n<script>\r\n  (function () {\r\n    var script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src  = \"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\";\r\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n  })();\r\n</script>\r\n\r\n</body>\r\n</html>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}